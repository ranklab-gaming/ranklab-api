name: ci
on: [push]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
      - name: Install mold
        uses: rui314/setup-mold@v1
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: incremental
      - name: Run Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
        env:
          CARGO_INCREMENTAL: 1
  deploy:
    runs-on: ubuntu-latest
    env:
      app-name: ${{ secrets.ECR_REPOSITORY_NAME }}
      container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      cluster-name: ${{ secrets.ECS_CLUSTER_NAME }}
      service-name: ${{ secrets.ECS_SERVICE_NAME }}
    if: github.ref == 'refs/heads/master'
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push to ECR and GCR
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          build-args: --progress=plain
      - name: Download latest ECS task definition
        id: download-task
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} --query 'taskDefinition' --output json > latest-task-definition.json
          echo "::set-output name=revision::$(($(cat latest-task-definition.json | jq .revision) - 1))"
      - name: Render Amazon ECS task definition from template
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-definition
        with:
          task-definition: task-definition.json
          container-name: ${{ env.container-name }}
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.service-name }}
          cluster: ${{ env.cluster-name }}
          wait-for-service-stability: true
      - name: De-register (latest-1) revision
        if: ${{ steps.download-task.outputs.revision > 0 }}
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}:${{ steps.download-task.outputs.revision }}
